extern crate decoder_macro;
use super::OpcodeDecoder;
use decoder_macro::OpcodeDecoder;

use crate::sixty_five::data_types::{Byte, Word};
use enum_display::EnumDisplay;

#[repr(u8)]
#[derive(OpcodeDecoder, EnumDisplay)]
pub enum Opcode {
    LoadAImmediate(Byte) = 0xa9,
    LoadAZeroPage(Byte) = 0xa5,
    LoadAZeroPageX(Byte) = 0xb5,
    LoadAAbsolute(Word) = 0xad,
    LoadAAbsoluteX(Word) = 0xbd,
    LoadAAbsoluteY(Word) = 0xb9,
    LoadAIndY(Byte) = 0xb1,
    LoadXImmediate(Byte) = 0xa2,
    LoadXZero(Byte) = 0xa6,
    LoadYImmediate(Byte) = 0xa0,
    LoadYZero(Byte) = 0xa4,
    LoadYZeroX(Byte) = 0xb4,
    LoadYAbsoluteX(Word) = 0xbc,
    StoreAZeroPage(Byte) = 0x85,
    StoreAZeroPageX(Byte) = 0x95,
    StoreAAbsolute(Word) = 0x8d,
    StoreAAbsoluteX(Word) = 0x9d,
    StoreAAbsoluteY(Word) = 0x99,
    StoreAIndirectX(Byte) = 0x81,
    StoreAIndirectY(Byte) = 0x91,
    StoreXZeroPage(Byte) = 0x86,
    StoreXZeroPageY(Byte) = 0x96,
    StoreXAbsolute(Word) = 0x8e,
    StoreYZeroPage(Byte) = 0x84,
    StoreYZeroPageX(Byte) = 0x94,
    StoreYAbsolute(Word) = 0x8c,
    MoveAY = 0xa8,
    MoveAX = 0xaa,
    MoveSX = 0xba,
    MoveYA = 0x98,
    MoveXA = 0x8a,
    MoveXS = 0x9a,
    AddImmediate(Byte) = 0x69,
    AddCarryZero(Byte) = 0x65,
    SubCarryImmediate(Byte) = 0xe9,
    AndImm(Byte) = 0x29,
    AndZero(Byte) = 0x25,
    AndZeroX(Byte) = 0x35,
    AndAbs(Word) = 0x2d,
    AndAbsX(Word) = 0x3d,
    AndAbsY(Word) = 0x39,
    AndIndX(Byte) = 0x21,
    AndIndY(Byte) = 0x31,
    OrZero(Byte) = 0x05,
    XorImm(Byte) = 0x49,
    XorZero(Byte) = 0x45,
    JumpAbs(Word) = 0x4c,
    JumpInd(Word) = 0x6c,
    JumpSubroutine(Word) = 0x20,
    RetSubroutine = 0x60,
    IncX = 0xe8,
    DecX = 0xca,
    IncY = 0xc8,
    DecY = 0x88,
    IncMemZero(Byte) = 0xe6,
    DecMemZero(Byte) = 0xc6,
    NoOp = 0xea,
    PushAcc = 0x48,
    PullAcc = 0x68,
    BranchCarryClear(Byte) = 0x90,
    BranchCarrySet(Byte) = 0xb0,
    BranchOverflowClear(Byte) = 0x50,
    BranchEqual(Byte) = 0xf0,
    BranchMinus(Byte) = 0x30,
    BranchNotEqual(Byte) = 0xd0,
    BranchPositive(Byte) = 0x10,
    BitTestZero(Byte) = 0x24,
    BitTestAbs(Word) = 0x2c,
    LShiftAcc = 0x0a,
    LShiftZero(Byte) = 0x06,
    LogRShiftAcc = 0x4a,
    LogRShiftAbs(Word) = 0x4e,
    RotateLAcc = 0x2a,
    RotateRAcc = 0x6a,
    CompareImm(Byte) = 0xc9,
    CompareXImm(Byte) = 0xe0,
    CompareXZero(Byte) = 0xe4,
    CompareYImm(Byte) = 0xc0,
    InterruptDisable = 0x78,
    SetDecimalMode = 0xf8,
    ClearDecimalMode = 0xd8,
    SetCarry = 0x38,
    ClearCarry = 0x18,
    Break = 0x00,
}
